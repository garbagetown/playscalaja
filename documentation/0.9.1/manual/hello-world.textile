h1. Play Scala の始めてのアプリケーション

本章は、定番の 'Hello World' を例にとって、Play Scala を紹介する簡単なチュートリアルです。


h2. <a>事前準備</a>

まず最初に、 Scala モジュールが正しく使える状態で、Play フレームワークがインストールされていることを確認しましょう。

コマンドラインを多様することになるので、Unix 系の OS を使う方がいいでしょう。Windows であっても、問題有りません。いくつかのコマンドをコマンドプロンプトで実行するだけです。

もちろんテキストエディタは必要です。Java 版のように、Play-Scala はコンパイルとデプロイのプロセスを自分自身で管理します。

h2. <a>プロジェクト作成</a>

さて、Play は正しくインストールされたので、Hello World アプリケーションを作りましょう。Play アプリケーションを作るのことは、PLay コマンドラインユーティリティによってしっかり管理されているので、とても簡単です。このユーティリティによって、全ての Play アプリケーションでプロジェクトレイアウトが標準化されます。

コマンドラインを新しく開き、以下のように入力してください。

bc. $ play new helloworld --with scala

アプリケーションのフルネームを入力します。 **Hello world** と入力してください。

bc. $ play new helloworld --with scala
~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   
~
~ play! 1.2.2, http://www.playframework.org
~
~ The new application will be created in ~/myScalaApp
~ What is the application name? [helloworld] Hello world
~
~ Resolving dependencies using ~/helloworld/conf/dependencies.yml,
~
~ 	play->scala 0.9.1 (from playLocalModules)
~
~ Installing resolved dependencies,
~
~ 	modules/scala-0.9.1 -> ~/play/1.2.2/modules/scala-0.9.1
~
~ OK, the application is created.
~ Start it with : play run helloworld
~ Have fun!
~

The **play new** command creates a new directory **helloworld/** and populates it with a series of files and directories, the most important being:

**play new** コマンドによって、 **helloworld/** ディレクトリが作成され、以下の最も重要な、一連のファイルとディレクトリが配置されます。

**app/** ディレクトリは、アプリケーションのコアが格納されます。アプリケーションの全 ***.scala files** がここに格納されるのです。デフォルトはひとつの **controllers.scala** ファイルです。もちろん、もっと複雑なアプリケーションでは、いくつかのフォルダでより多くのファイルを扱うことができます。また **app/views** ディレクトリにはテンプレートファイルが存在します。テンプレートファイルは通常、単純なテキストファイル、XML ファイル、あるいは動的なプレースホルダーを持つ HTML ファイルになります。

**conf/** ディレクトリには、アプリケーションの全ての設定ファイルが入っています。主要なものとしては、メインとなる **application.conf** ファイル、 **routes** 定義ファイル、そして言語国際化に使われる **messages** ファイルになります。

**lib/** には、標準的な .jar ファイルとしてパッケージされた、任意の Scala ライブラリが全て入ります。

**public/** ディレクトリには、公開利用可能なリソースが全て格納されています。JavaScript ファイルや、スタイルシートファイル、画像ファイルが該当します。

**test/** ディレクトリには、アプリケーションの全てのテストコードが含まれます。テストコードは ScalaTest 、もしくは Selenium テストとして記述されます。

p(note). **Play フレームワークは UTF-8 によってのみエンコーディングされる** ため、全ての定義ファイルが UTF-8 でエンコーディングされていることが重要になります。適宜、エディタのエンコーディングを設定してください。

さて、熟練の Scala プログラマなら .class ファイルはどこに行くのかと考えるでしょう。答えは「どこにも行かない」です。Play フレームワークは .class ファイルを一切使わず、Scala ソースファイルを直接読み込みます。

これは開発過程において、２つの重要な意味を持ちます。ひとつは、 Scala ソースファイルの変更を検出し、実行中に自動的に再読み込みする、ということです。ふたつめは、 Exception が発生した時に、 Play フレームワークは実際の Scala ソースコードベースでエラーレポートを表示させることができる、ということです。

h2. <a>アプリケーション稼働</a>

さて、新しく作ったアプリケーションを試してみましょう。 **helloworld/** ディレクトリ内で、 **play run** コマンドを実行するだけで OK です。Playはアプリケーションをロードして、9000番ポートで WEB サーバを起動します。

ブラウザでURLを "http://localhost:9000":http://localhost:9000 と指定することで新しいアプリケーションを確認することができます。新しく作ったアプリケーションは、デフォルトの WELCOME ページを用意していて、これが表示されたことで作成がうまくいったことが分かります。

!images/welcome!

この新しいアプリケーションがどのようにこのページを表示しているのか見てみましょう。

主な入り口は、 **conf/routes** ファイルになります。このファイルでは、全てのアクセス可能なURLを定義します。生成されたroutesファイルを参照すると、最初の「ルート」を確認することができます。

bc. GET		/			Application.index

これは、単純に、 **/** パスに対する **GET** リクエストを受け取ると、 @Application.index@ アクションメソッドを呼び出すということを意味します。このケースでは、 @Application.index@ は、 @controllers.Application.index@ へのショートカットとなります。controllersパッケージは暗黙的に解決されます。

スタンドアローンのScalaアプリを作る際には、以下のように @main@ メソッドによって入り口を定義されたシングルオブジェクトを一般的には使います。

bc. object Main {
    def main(args: Array[String]) {
        …
    }
}

Playアプリでは、それぞれのURLにくくり付く、いくつかの入り口を持ちます。これを **アクションメソッド** と呼びます。アクションメソッドは、 **コントローラ** という特別なオブジェクトで定義されます。

@controllers.Application@ コントローラがどのようなものか見てみましょう。 **helloworld/app/controllers.scala** ソースファイルを開きます。

bc. package controllers
 
import play._
import play.mvc._
 
object Application extends Controller {
    
    import views.Application._
    
    def index = {
        html.index("Your new Scala application is ready!")
    }
    
}

@play.mvc.Controller@ クラスを継承していることに気づくと思います。この index アクションは、このオブジェクトの単なるメソッドとして定義されます。これがアクションメソッドの定義方法です。アクションメソッドは、フレームワークによって、純粋な HTTP レスポンスに暗黙的に変換される値を常に返します。

デフォルトの index アクションはシンプルです。 *views.Application.html.index* を呼び出し、そこから生成される HTML を応答します。テンプレートを使うのは HTTP レスポンスを生成するのに最も一般的な方法になります。（唯一の方法ではありません）

テンプレートは、 **/app/views** に配置された、Scalaソースファイルになります。

テンプレートファイルを見てみましょう。 **yabe/app/views/Application/index.scala.html** を開きます。

bc. @(title:String)
 
@main(title) {
    
    @views.defaults.html.welcome(title)
    
}

テンプレートの中身は実に簡単に見えますね。実際、これは他のテンプレートを呼び出し、Welcomeページを生成しているのです。

一行目はテンプレートの引数を定義しています。 *play.template.Html* を生成する関数をテンプレートとしているという定義になります。この場合、テンプレートはString型の @title@ 引数を持っていて、テンプレートの型は、 @(String) => Html@ となります。

そして、このテンプレートは ２つの引数（ @String@ と @Html@ ブロック）を要求する、 @main@ という別のテンプレートを呼び出します。

@main@ テンプレートが定義されている、 **helloworld/app/views/main.scala.html** を見てみましょう。

bc. @(title:String = "")(body: => Html)
 
<!DOCTYPE html>
<html>
  <head>
    <title>@title</title>
    <link rel="stylesheet" href="@asset("public/stylesheets/main.css")">
    <link rel="shortcut icon" href="@asset("public/images/favicon.png")">
    <script src="@asset("public/javascripts/jquery-1.5.2.min.js")"></script>
  </head>
  <body>
    @body
  </body>
</html>

ここでも一行目はテンプレートのパラメータを定義しています。 @main@ テンプレートの型は @(String) (Html) => Html@ になります。

h2. <a>フォームを作成</a>

名前を入力するフォームを作るところからから ‘Hello World’ アプリケーションの開発を始めましょう。

**helloworld/app/views/Application/index.scala.html** テンプレートを編集してください。

bc. @main(title = "Home") {
    <form action="@action(controllers.Application.sayHello)" method="GET">
        <input type="text" name="myName" /> 
        <input type="submit" value="Say hello!" />
    </form>
}

p(note). フォームのメソッドとして、GET を使っています。これは、フォームのサブミットが何も副次的な挙動を持たず、冪等処理になっているためです。

**Application.sayHello** アクションを呼び出す URL を Play フレームワークに自動的に生成させるために、 **@action(...)** ヘルパーを使います。

また、コントローラを **helloworld/app/controllers.scala** ファイルに適応させましょう。

bc. package controllers
 
import play._
import play.mvc._
 
object Application extends Controller {
    
    import views.Application._
    
    def index = html.index()  
    def sayHello = html.sayHello(params.get("myName"))
    
}

@index@ アクションの中で、パラメータを何も必要としない新しいテンプレートとして、@html.index@ テンプレートのパラメータを削除します。 @sayHello@ では、 @myName@ パラメタ値をサブミットされたデータから抜き取り、 @html.sayHello@ テンプレートに引き渡します。

さて、ブラウザをリロードしましょう。おっと、エラーになりましたね。

!images/hello-1!

これが、 Play フレームワークでの開発スタイルです！ページをリロードする度に変更を自動的にコンパイルし、ブラウザにコンパイルと実行エラー結果を表示します。

エラーはとても分かりやすいですね。まだ @html.sayHello@ テンプレートを定義していないために起こっているエラーです。 **helloworld/app/views/Application/sayHello.scala.html** ファイルに作りましょう。

bc. @(name:String)
 
@main(title = "Hello") {
    
    <h1>Hello @(name ?: "Guest")!</h1>
    
    <a href="@action(controllers.Application.index)">Back to form</a>
    
}

リロードしてください。

!images/guide1-page2!

テンプレートで **?:** 演算子をどう使うか見てみましょう。この演算子によって **name** 値が空だった場合に、デフォルトの値をセットします。よって、名前を入力せずにフォームをサブミットしようとすると、‘Hello guest’ と表示されます。

h2. <a>URL を良くする</a>

さて、サブミットされた URL を見てみると、こんな風になっています。

bc. http://localhost:9000/application/sayhello?myName=guillaume

あまりよろしく無いですね。これは、Play フレームワークが、デフォルトの ‘catch all’ ルートを使っているからです。

bc. *       /{controller}/{action}                  {controller}.{action}

 **Application.sayHello** アクションに対して、カスタマイズされたパスを特定してあげることで、もっといい URL にすることができます。 **helloworld/conf/routes** ファイルを編集し、最初のルートの後ろに以下を追記してください。

bc. GET     /hello                                  Application.sayHello

では、フォームに戻り、サブミットしなおしてください。URL が新しくなっていることが確認できます。

h2. <a>レイアウトをカスタマイズする</a>

アプリケーションが使っているどのテンプレートが同じ **main.html** テンプレートを継承している限り、カスタマイズされたレイアウトを簡単に追加することができます。 **helloworld/app/views/main.html** ファイルを編集してください。

bc. ...
<body>
    The Hello world app.
    <hr/>
    @body
</body>
...

どのページにも共通ヘッダーを付けました。

!images/guide1-page3!

h2. <a>バリデーションを追加</a>

フォームにちょっとしたバリデーションを追加しましょう。名前の入力を必須にします。Play フレームワークのバリデーション機能を使うことができます。

 **helloworld/app/controllers.scala** ファイルの **sayHello** アクションを編集してください。

bc. ...
def sayHello = {
    val myName = params.get("myName")
    if(myName == "") {
        flash += ("error" -> "Oops, please enter your name!")
        Action(index)
    } else {
        html.sayHello(params.get("myName"))
    }
}
...

ここで **sayHello** アクションは２つの値を返すことができます。フォームから送られてきた名前が存在する場合には @Html@ 値、エラーが有る場合には @Action@ 値を返します。 @Action@ 値は、他のアクションメソッドにリダイレクトするために使われています。ここでは @index@ アクションへリダイレクトするよう指定されています。

Play フレームワークは、myName フィールドが埋まっているかを自動的にチェックし、 **errors** スコープへエラーオブジェクトを追加します。もし何かエラーがあれば、 **flash** スコープにメッセージを追加し、 **index** アクションへリダイレクトします。

リダイレクトされている間、flash スコープにはメッセージが表示されています。

さて、とにかく **error** メッセージを表示させなければなりません。 **helloworld/app/views/Application/index.html** を編集してください。

bc. @()(implicit flash:play.mvc.Scope.Flash)
 
@if(flash.get("error")) {
    <p style="color:#c00">
        @flash.get("error")
    </p>
}
 
@main(title = "Home") {
    <form action="@action(controllers.Application.sayHello)" method="GET">
        <input type="text" name="myName" /> 
        <input type="submit" value="Say hello!" />
    </form>
}

動きを確認しましょう。

!images/guide1-page4!

controller スコープから、どう flash パラメタが暗黙的に取得しているか確認してください。

h2. <a>自動テストを書きましょう。</a>

アプリケーションのテストを書けばあとは終わりです。テストのための Java ロジックは無いので、Web アプリケーションそのものをテストしなければなりません。ですので、 Selenium テストを書きます。

最初に、アプリケーションを **test mode** で稼働させる必要があります。アプリケーションをストップさせ、 **test** コマンドで再起動してください。

bc. $ play test

**play test** コマンドは、ほとんど **play run** と一緒です。違うのは、ブラウザから直接テストを実行できるテストランナーモジュールをロードするところです。

ブラウザを開き、 "http://localhost:9000/@tests":http://localhost:9000/@tests にアクセスし、テストランナーを確認してください。デフォルトのテストを全部選択して、稼働させてください。オールグリーンとなるはずです。しかし、デフォルトのテストは、本当に何もしていません。

!images/guide1-test!

selenium テストは、一般的には HTML ファイルとして書かれます。selenium に求められる HTML シンタックスはちょっとめんどくさいです（ table タグを使うフォーマットになっています ）。しかし素晴らしいことに Play フレームワークは Play テンプレートエンジンと、selenium　シナリオのための単純化したシンタックスをサポートするタグセットを使い、selenium の HTML を生成してくれます。

新しく作成された Play アプリケーションのデフォルトテストには、既に selenium テストが含まれています。 **helloworld/test/Application.test.html** ファイルを開いてください。

bc. *{ You can use plain selenium command using the selenium tag }*
 
#{selenium}
    // Open the home page, and check that no error occurred
    open('/')
    assertNotTitle('Application error')
#{/selenium}

このテストは、今は何も問題なく動きます。ホームページを開き、ページコンテンツに ‘Application error’ というテキストが含まれていないことを確認しているだけです。

テストを書いてみましょう。テストコンテンツを編集します。

bc. #{selenium}
    // Open the home page, and check that no error occurred
    open('/')
    assertNotTitle('Application error')
    
    // Check that it is the form
    assertTextPresent('The Hello world app.')
    
    // Submit the form
    clickAndWait('css=input[type=submit]')
    
    // Check the error
    assertTextPresent('Oops, please enter your name!')
    
    // Type the name and submit
    type('css=input[type=text]', 'bob')
    clickAndWait('css=input[type=submit]')
    
    // Check the result
    assertTextPresent('Hello bob!')
    assertTextPresent('The Hello world app.')
    
    // Check the back link
    clickAndWait('link=Back to form')
    
    // Home page?
    assertTextNotPresent('Hello bob!')
#{/selenium}

アプリケーションのテストが完了しました。 ‘Start’ をクリックし、テストランナーの中のテストを選択してください。オールグリーンです！

!images/guide1-test2!


h2. <a>より詳しく</a>

これはごく簡単なアプリケーションの単純なチュートリアルでした。より詳しく知りたい場合は、 %(next)"Play with Scala":learnscala% を参照してください。
