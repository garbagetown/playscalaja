h1. HTTP から Scala へのデータバインド

Java版 のように、アクションメソッドから直接 HTTP パラメータを受け取ることができます。メソッドの引数名は、HTTP パラメータと同じにする必要があります。この章では、Scala 型を特定するに関する、Java 版との違いを説明します。

h2. @Option@ 型へのバインディング

時として、特定のパラメータが、HTTPリクエストに含まれているかどうか分からない場合があります。この場合、 @Option@ 型に、この値をバインドしてくなるはずです。

bc. def hello(name: Option[String]) = {
    name.map("Hello " + _ + "!").getOrElse("Please give us your name!")
}

h2. Scala のデフォルトのパラメータ値を使う

HTTPパラメータが無い時の別の対処方法として、メソッドパラメータのデフォルト値を指定する方法があります。

bc. def hello(name: String = "Guest") = {
    "Hello " + name + "!"
}

別の URL に誘導するよりも、デフォルトパラメータを使うこの実装の方が、効果的な場合もあります。例えば、 Play フレームワークに **name** パラメータを特定せずに @Hello@ アクションへのリダイレクトを要求することができる。

bc. def redirectToHello = Action(hello())

h2. Case クラスにバインド

メソッドパラメータとして **case class** を指定することで、より複雑な構造を詰め込んで、Play フレームワークに問い合わせを自動で行うことができます。
例えば、

bc. case class User(name: String, email: String)

と定義した Case クラスを引数にして、以下のようにアクションメソッドを定義します。

bc. def hello(user: User) = user match {
    case User("guillaume", _) => "Howdy, guillaume!"
    case User(name, _) => "Hello " + name
}

同じ手法は、Java 版では JavaBean へのバインディングに見られます。

bc. /hello?user.name=Guillaume&user.email=gbo@zenexity.com

p(note). Play フレームワークは、定義をしなければ Case クラスのデフォルトコンストラクタを自動的に生成します。しかしながら、このコンストラクタは完全に空で、オブジェクト初期化のタイミングで、Case 本体が実行されることはありません。

<hr>

次は、 %(next)"Play テンプレートで Scala 型を使う":templates% 特に、いくつか特徴があるので、それを紹介します。
