h1. CAPTCHAのセットアップ

このブログエンジンには誰でもコメントを投稿できてしまうので、自動スパムを回避するためのちょっとした防衛策をとる必要があります。それには、 "キャプチャ":http://ja.wikipedia.org/wiki/CAPTCHA 画像を使うのが簡単です。

h2. <a>CAPTHCA 画像の生成</a>

これから、Play を使うと キャプチャ 画像の生成が簡単にできることを確認していきます。基本的には別のアクションを使うというだけで、これまでと違うのは HTML レスポンスの代わりに、バイナリストリームを応答するところです。

Play フレームワークは **フルスタック** な WEB フレームワークのため、WEB アプリケーションの典型的なニーズ　〜　キャプチャ 画像生成はそのうちのひとつですが　〜に対してあらかじめ組み込まれた仕掛けを使ってみることにします。キャプチャ 画像を簡単に生成するために **play.libs.Images** ユーティリティを使い、HTML レスポンスに出力してみましょう。

いつも通り、簡単な実装から始めてみます。 **Application** コントローラに **captcha** アクションを追加してください。

bc. def captcha = Images.captcha

Images.Captcha クラスは、 @java.io.InputStream@ を実装しているので、キャプチャ オブジェクトを直接返すことができます。

p(note). **play.libs._** をインポートすることを、 **忘れないでください。**

さて、新しいルートを、 **/yabe/conf/routes** ファイルに追加してください。

bc. GET     /captcha                                Application.captcha

"http://localhost:9000/captcha":http://localhost:9000/captcha を開いて、 **captcha** アクションを試してみてください。

!images/guide5-1!

リロードする度に、文字列がランダムに生成されます。

h2. <a>ステートをどう管理しましょう</a>

ここまでは簡単ですが、最も複雑なのはここです。キャプチャ画像を検証するために、キャプチャ画像にランダムに書かれたて文字列をどこかに保存し、Form サブミット時にチェックする必要があります。

もちろん、画像生成時に文字列をユーザセッションに格納して、あとでそれを抜き出すことはできます。しかしこれにはふたつの問題点があります。

**第一に** Play フレームワークのセッションはクッキーに保存されるということです。これは、アーキテクチャの観点から様々な問題を解決しますが、同時にいろいろな影響を引き起こします。データが書かれるセッションクッキーは、署名されています（ユーザが編集することができない）が、暗号化はされていません。もしキャプチャコードをセッションに書き込んでしまうと、セッションクッキーを読み取ることで簡単にコードを盗まれてしまいます。

**第二に** Play フレームワークは **ステートレス** なフレームワークであることを覚えているでしょうか。純粋にステートレスな方法で、情報を管理したいのです。分かりやすい例でいうと、ふたつの違うキャプチャ画像が、同時に２つの違うブログページで開かれた時、何が起こるでしょうか？　それぞれのフォームからのキャプチャコードを追随しておかないといけないのです。

このように、我々は２つの問題を解決しなければなりません。キャプチャの秘密鍵はサーバサイドに格納しておくことになります。それは一時的なデータとなるので、簡単に Play フレームワークの **キャッシュ** を使います。さらに、キャッシュされたデータは限られた時間だけ存続するものなので、もうひとつセキュリテリ機能を追加します。（キャプチャコードは１０分間だけ有効、ということにしましょう）そして、後からコードを解決するために、 **ユニークID** を生成する必要があります。ユニークIDは、各フォームに hidden フィールドとして、そして生成されたキャプチャコードへの暗黙的な参照として追加されます。

この方法は、ステート問題を鮮やかに解決します。

**captcha** アクションを以下のように編集してください。

bc. def captcha(id:String) = {
    val captcha = Images.captcha
    val code = captcha.getText("#E4EAFD")
    Cache.set(id, code, "10mn")
    captcha
}

Note  **getText(...)** メソッドはパラメータとしてどんな色でもとれます。この色を使って、テキストが描画されます。

p(note). **play.cache._** をインポートするのを **忘れないでください**

h2. <a>コメントフォームにキャプチャ画像を追加</a>

さて、コメントフォームを表示する前に、ユニークIDを生成させます。そして、この ID を使ってキャプチャ画像を HTML フォームに統合させるように編集し、他の hidden フィールドに ID を追加します。

**Application.show** アクションを以下のように書き直してください。

bc. def show(id: Long) = {
    Post.byIdWithAuthorAndComments(id).map { post =>
        html.show(post, post._1.prevNext, Codec.UUID)
    } getOrElse {
        NotFound("No such Post")
    }
}

そして **/yable/app/views/Application/show.scala.html** テンプレート内のフォームです。

bc. ...
<p>
    <label for="author">Your name: </label>
    <input type="text" name="author" value="@params.get("author")">
</p>
<p>
    <label for="content">Your message: </label>
    <textarea name="content">@params.get("content")</textarea>
</p>
<p>
    <label for="code">Please type the code below: </label>
    <img src="@action(controllers.Application.captcha(randomID))">
    <br>
    <input type="text" name="code" id="code" size="18" value="">
    <input type="hidden" name="randomID" value="@randomID">
</p>
<p>
    <input type="submit" value="Submit your comment" />
</p>
...

いい感じです。これでコメントフォームにキャプチャ画像が入りました。

!images/guide5-2!

h2. <a>キャプチャを検証</a>

さて、とにかくキャプチャを検証しなければなりません。hidden フィールドとして、**ランダムID** を追加しましたよね？ですので、 **postComment** アクションの中でそれを受け取ることができます。そして、キャッシュから抜き取ったコードと、サブミットされたコードを最終的に比較してください。

難しい話ではありません。 **postComment** を編集してください。

bc. def postComment(postId:Long) = {
    val author = params.get("author")
    val content = params.get("content")
    val code = params.get("code")
    val randomID = params.get("randomID")
    Validation.required("author", author).message("Author is required")
    Validation.required("content", content).message("Content is required")
    
    println(code)
    println(Cache.get(randomID).orNull)
    
    Validation.equals("code", code, "code", Cache.get(randomID).orNull).
        message("Invalid code. Please type it again")
    if(Validation.hasErrors) {
        show(postId)
    } else {
        Comment.create(Comment(postId, author, content))
        flash += "success" -> ("Thanks for posting " + author)
        Cache.delete(randomID)
        Action(show(postId))
    }
}

またエラーメッセージが増えたので、エラーメッセージのヒョジの仕方を **show.scala.html** で編集しましょう。（そうです。単純に最初のエラーだけ表示させてますが、それで十分です）

bc. .. 
@if(errors) {
    <p class="error">
        @errors.head._2
    </p>
}
...

p(note). 通常、もっと複雑なフォームでは、エラーメッセージをこのように管理したりはせず、 **messages** ファイルに外部定義化し、該当のフィールドにそれぞれのエラーが印字されるようにします。

実装し終わったキャプチャを確認してみましょう。

!images/guide5-3!

すばらしい！

<hr>

p(note). (つづく)
