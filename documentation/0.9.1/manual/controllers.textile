h1. Play フレームワークのコントローラを Scala で記述する

Play フレームワークのコントローラは、 Play アプリケーションにおいて最も重要な部品です。 Play-Scala アプリケーションは、Java の Play アプリケーションと同じコンセプトを共有していますが、より機能的な方法でアクションを記述します。

h2. Scala の controllers はオブジェクト

コントローラは、 Scala のシングルトンオブジェクトで、 @controllers@ パッケージに属し、 @play.mvc.Controller@ クラスを継承します。 Scala では、同じファイルに好きなだけたくさんのコントローラを宣言することができます。

こちらは、 Scala のコントローラ定義です。

bc. package controllers {
    
    import play._
    import play.mvc._
    
    object Users extends Controller {
        
        def show(id:Long) = Template("user" -> User.findById(id))
        
        def edit(id:Long, email:String) = {
            User.changeEmail(id, email)
            Action(show(id))
        }
        
    }
    
}

Scala は、 **シングルトンオブジェクト** 本来の概念を提供するため、 @show(id)@ のようなどんなアクションへも静的に参照する能力が維持されており、それによってこれ以上 Java の Static メソッドを扱う必要はありません。


h2. アクションメソッドが返す値

Play のコントローラは、レスポンス生成を呼び出す @render(...)@ や @forbidden()@ といった必須の命令を通常使います。一方で Scala で書かれたアクションメソッドは、値を返さなければいけない関数として見られます。この値はフレームワークによって、リクエストに対するHTTPレスポンスを生成するのに使われます。

アクションメソッドはもちろん、リクエストに応じて、いくつかの種類の値を返すことができます。（例えば、 @Template@ や @Forbidden@ のように）

以下は、典型的な型を列挙したものです。

<hr>

h3. Ok

@Ok@ という値を返すことで、空の **200 OK** ステータスの HTTP レスポンスを生成することができます。

bc. def index = Ok

<hr>

h3. Html

@Html@ という値を返すことで、 HTML コンテンツを伴う、 **200 OK** HTTP レスポンスを生成します。レスポンスのコンテンツタイプは、自動的に **text/html** にセットされます。

bc. def index = Html("<h1>Hello world!</h1>")

テンプレートを呼ぶことで、 HTML を生成することも可能です。

<hr>

h3. Xml

@Xml@ という値を返すことで、 XML コンテンツを伴う、 **200 OK** HTTP レスポンスを生成します。レスポンスのコンテンツタイプは、自動的に **text/xml** にセットされます。

bc. def index = Xml(<message>Hello world!</message>)

<hr>

h3. Text

@Text@ という値を返すことで、テキストコンテンツを伴う、 **200 OK** HTTP レスポンスを生成します。レスポンスのコンテンツタイプは、自動的に **text/plain** にセットされます。

bc. def index = Text("Hello world!")

<hr>

h3. Json

@Json@ という値を返すことで、テキストコンテンツを伴う、 **200 OK** HTTP レスポンスを生成します。レスポンスのコンテンツタイプは、自動的に **application/json** にセットされます。

bc. def index = Json("{message: 'Hello world'}")

Scala オブジェクトを何か渡してみることで、 Play フレームワークは、 Json にシリアライズしようとします。

bc. def index = Json(users)

p(note). しかしながら、現状、JSONシリアライズ機能はJavaで実装されたもので、複雑な Scala 構造のものに対しては、期待通りの挙動ができません。
 
回避策としては、 "Lift JSON":https://github.com/jonifreeman/liftweb/tree/master/lift-json/ のような、 Scala で実装された JSON シリアライズライブラリを、 @Json(JsonAST.render(users))@ というように使ってください。


<hr>

h3. Created

@Created@ という値を返すことで、空の **201 Created** ステータスの HTTP レスポンスを生成することができます。


bc. def index = Created

<hr>

h3. Accepted

@Accepted@ という値を返すことで、空の **202 Accepted** ステータスの HTTP レスポンスを生成することができます。

bc. def index = Accepted

<hr>

h3. NoContent

@NoContent@ という値を返すことで、空の **204 No Content** ステータスの HTTP レスポンスを生成することができます。

bc. def index = NoContent

<hr>

h3. Action

アクションメソッドで、 @Action@ を返すと、 Play フレームワークは一致するアクションをブラウザにリダイレクトし、アクションメソッドの引数を、URLに適宜変換します。

bc. def index = Action(show(3))

この @show(3)@ は、 **by-name** パラメータで、直接、該当のメソッドを呼び出すわけではありません。Playフレームワークは、（通常は **users/3** のような） URLとして呼び出すようにこれを解決し、このURLに対してHTTPリダイレクトを発生させます。アクションは、リダイレクトの結果新しくリクエストされたものに呼び出されるのです。

p(note). Javaコントローラでは、該当のアクションメソッドを直接呼び出して、同じ結果を得ています。Scalaの **call by name** コンセプトを使うことで、型チェックを維持したリダイレクトを、無理なくコンパイラに実現されています。


<hr>

h3. Redirect

@Redirect@ という値を返すことで、空の **301 Moved Permanently** ステータスの HTTP レスポンスを生成することができます。

bc. def index = Redirect("http://www.google.com")

オプションとして、第２引数を指定して、**301** か **302** かのステータスコードに変換できます。

bc. def index = Redirect("http://www.google.com", false)

<hr>

h3. NotModified

@NotModified@ という値を返すことで、空の **304 Not Modified** ステータスの HTTP レスポンスを生成することができます。

bc. def index = NotModified

また、レスポンスに、 **ETag** を指定することができます。

bc. def index = NotModified("123456")

<hr>

h3. BadRequest

@BadRequest@ という値を返すことで、空の **400 Bad Request** ステータスの HTTP レスポンスを生成することができます。

bc. def index = BadRequest

<hr>

h3. Unauthorized

@Unauthorized@ という値を返すことで、空の **401 Unauthorized** ステータスの HTTP レスポンスを生成することができます。

bc. def index = Unauthorized

また、オプションとして領域名を指定することもできます。

bc. def index = Unauthorized("Administration area")

<hr>

h3. Forbidden

@Forbidden@ という値を返すことで、空の **403 Forbidden** ステータスの HTTP レスポンスを生成することができます。

bc. def index = Forbidden

また、オプションとして、エラーメッセージを指定することができます。

bc. def index = Forbidden("Unsufficient permissions")

<hr>

h3. NotFound

@NotFound@ という値を返すことで、空の **404 Not Found** ステータスの HTTP レスポンスを生成することができます。

bc. def index = NotFound

また、オプションとして、リソース名を指定することができます。

bc. def index = NotFound("Article not found")

あるいは、より古典的なHTTPメソッドと、リソースパスの組み合わせを使うことができます。

bc. def index = NotFound("GET", "/toto")

<hr>

h3. Error

@Error@ という値を返すことで、空の **500 Internal Server Error** ステータスの HTTP レスポンスを生成することができます。

bc. def index = Error

オプションとして、エラーメッセージを指定することも可能です。

bc. def index = Error("Oops...")

また、もっとエラーコードを特定することも可能です。

bc. def index = Error(503, "Not ready yet...")

h2. 推論される型を返す

型推論も利くので、返却値を直接指定することも可能です。例えば、以下のようにStringをそのまま返すことができます。

bc. def index = "<h1>Hello world</h1>"

また以下のようにXHTMLを書いて、直接返すこともできます。

bc. def index = <h1>Hello world</h1>

もし返却される型がバイナリと推論される場合には、Playフレームワークは自動的にバイナリとしてレスポンスを生成します。つまり、以下のように書くと、用意された Captha ヘルパーを使って、キャプチャ画像が生成されます。

bc. def index = Images.captcha

h2. インタセプター

インタセプターは、Javaコントローラとほとんど同じような挙動をします。コントローラメソッドに割り込みアノテーションを付加します。

bc. @Before def logRequests {
    println("New request...")
}

ご覧のように、 @logRequests@ は値を返していません。なので、リクエストは、引き続き次のインタセプターを呼び出し、最後にアクションメソッドを呼び出します。

しかし、値を返す割り込みコントローラを書くこともできます。

bc. @Before def protectActions = {
    Forbidden
}

ここでは、処理が停止し、 @Forbidden@ の返却によって、HTTPレスポンスが生成されます。

もし、リクエスト処理を続行させたければ、 @Continue@ を応答させるインタセプターを作るだけです。

bc. @Before def protectActions = {
    session("isAdmin") match {
        case Some("yes") => Continue
        case _ => Forbidden("Restricted to administrators")
    }
}


h2. Traitを使ったミックスインコントローラ

Scala の Trait は、いくつかの機能をミックスインすることで、コントローラをより効率的に構成するのに使われます。コントローラ Trait の中でインタセプターとアクションメソッドの両方を定義することができます。

例えば、以下の **Secure** Trait はセキュリティのためのインタセプターを、Trait を適用する全てのコントローラに追加しています。

bc. trait Secure {
    self:Controller =>
    
    @Before checkSecurity = {
        session("username") match {
            case Some(username) => renderArgs += "user" -> User(username)
                                   Continue
            case None => Action(Authentication.login)
        }
    }
    
    def connectedUser = renderArgs("user").get
    
}

p(note). ここでの @self:Controller =>@ という記述は、このTraitは @Controller@ 型にしかミックスインできないということを示しています。

そしてこの Trait を使うことによって、セキュアなコントローラを作ることができます。

bc. object Application extends Controller with Secure {
    
    def index = <h1>Hello {connectedUser.name}!</h1>
    
}

<hr>

 %(next)"Data binding":dataBinding% には、Java 版と微妙に違いがあります。
 
 