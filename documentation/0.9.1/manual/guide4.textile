h1. コメントの投稿と表示

ブログのホームページは出来上がっているので、続いて Post 詳細ページをコーディングします。このページは今の Post に対する全てのコメントを表示し、新しいコメントを投稿するフィールドを含めます。

h2. <a>show アクション作成</a>

Post 詳細ページを表示するために、 **Application** コントローラーに新しい Action が必要です。 **show** アクションとしてこれを作りましょう。

bc. def show(id: Long) = {
    Post.byIdWithAuthorAndComments(id).map {
        html.show(_)
    } getOrElse {
        NotFound("No such Post")
    }
}

このように show アクションはとてもシンプルです。 **Long** 型の Scala 値として HTTP の **id** パラメータを自動的に受け取るメソッドパラメータを **id** として宣言しています。このパラメータは、クエリストリングか、URL パスか、リクエスト電文の Body 部かのいずれかから引き抜かれます。

p(note). もし送信した HTTP パラメータの **id** が、数値型でなければ、errors コンテナにバリデーションエラーを自動的に加えます。

このアクションは **/yabe/app/views/Application/show.scala.html** テンプレートを表示します。

bc. @(post:(models.Post,models.User,Seq[models.Comment]))
 
@main(title = post._1.title) {
    
    @display(post, mode = "full")
    
}

**display** 関数は既に作ってあるので、このページはとてもシンプルに書けます。

h2. <a>詳細ページにリンクを追加</a>

display タグの中では、全てのリンクは **＃** を使って空にしてあります。 **Application.show** アクションにリンクポイントを設定しましょう。Play フレームワークでは、テンプレートの中で **actionヘルパー** を使うことで簡単にリンクを構築することができます。

**/yabe/app/views/tags/display.scala.html** のタグを編集してみましょう。

bc. ...
<h2 class="post-title">
    <a href="@action(controllers.Application.show(post._1.id()))">
        @post._1.title
    </a>
</h2>
...

ホームページをリロードし、Post タイトルをクリックし、Post ページを表示してください。

!images/guide4-0!

すばらしい、ですが、ホームページに戻るリンクがありませんね。 **/yabe/app/views/main.scala.html** テンプレートを編集し、タイトルリンクを完成させましょう。

bc. ...
<div id="title">
    <span class="about">About this blog</span>
    <h1>
        <a href="@action(controllers.Application.index)">
            @play.Play.configuration.get("blog.title")
        </a>
    </h1>
    <h2>@play.Play.configuration.get("blog.baseline")</h2>
</div>
... 

これでホームページと Post 詳細ページの間をナビゲートすることができるようになりました。

h2. <a>URLをもう少しよくしましょう。</a>

見て分かるように、Post 詳細ページの URL は以下のような具合です。

bc. /application/show?id=1

Play フレームワークはデフォルトの、「 catch all 」ルートを使っているからです。

bc. *       /{controller}/{action}                  {controller}.{action}

**Application.show** アクションへのカスタムパス特定することによって、URLを良くすることができます。 **/yabe/conf/routes** ファイルを編集し、最初のものの後ろに、以下のルートを追加してください。

bc. GET     /posts/{id}                             Application.show

p(note). この方法では、URL パスから **id** が取得されます。

ブラウザを再読み込みして、挙動を確認してください。

h2. <a>ページングを追加</a>

Post を簡単にナビゲーションするために、ページングの仕掛けを追加しましょう。Post クラスを拡張して、前と次をくくり付けられるようにします。

ここにあるSQLクエリは、特定のエレメントから前と次の Post を括り付けるために使うものです。

bc. (
    select *, 'next' as pos from post 
    where postedAt < {date} order by postedAt desc limit 1
)
    union
(
    select *, 'prev' as pos from post 
    where postedAt > {date} order by postedAt asc limit 1
)
 
order by postedAt desc

そしてクエリ結果を @(Option[Post], Option[Post])@ の値に変換させます。このふたつのうち、一つ目が前の要素が Post で、二つ目の要素が次の Post に該当します。

bc. opt('pos.is("prev") ~> Post.on("")) ~ opt('pos.is("next") ~> Post.on(""))

これが @Post@ クラスに追加する新しい @prevNext@ メソッドです。

bc. def prevNext = {        
    SQL(
        """
            (
                select *, 'next' as pos from post 
                where postedAt < {date} order by postedAt desc limit 1
            )
                union
            (
                select *, 'prev' as pos from post 
                where postedAt > {date} order by postedAt asc limit 1
            )
 
            order by postedAt desc
            
        """
    ).on("date" -> postedAt).as( 
        opt('pos.is("prev")~>Post.on("")) ~ opt('pos.is("next")~>Post.on("")) 
        ^^ flatten
    )
}

そして *show.html* テンプレートに、以下の情報を追加しましょう。

bc. def show(id: Long) = {
    Post.byIdWithAuthorAndComments(id).map { post =>
        html.show(post, post._1.prevNext)
    } getOrElse {
        NotFound("No such Post")
    }
}

これらのメソッドをリクエストの間、何回か呼ぶことになりますが、まだ十分ではありません。 **show.scala.html** テンプレートのトップにページングリンクを追加しましょう。

bc. @(
    post:(models.Post,models.User,Seq[models.Comment]),
    pagination:(Option[models.Post],Option[models.Post])
)
 
@main(title = post._1.title) {
    
    <ul id="pagination">
        @pagination._1.map { post =>
            <li id="previous">
                <a href="@action(controllers.Application.show(post.id()))">
                    @post.title
                </a>
            </li>
        }
        @pagination._2.map { post =>
            <li id="next">
                <a href="@action(controllers.Application.show(post.id()))">
                    @post.title
                </a>
            </li>
        }
    </ul>
    
    @display(post, mode = "full")
    
}

いいですね。

h2. <a>コメントフォームを追加</a>

コメントフォームをセットアップしましょう。 **postComment** アクションを ApplicationContorller に追加します。

bc. def postComment(postId:Long) = {
    val author = params.get("author")
    val content = params.get("content")
    Comment.create(Comment(postId, author, content))
    Action(show(postId))
}

@Action@ 値を返すようにしたのは、 @show(postId)@ にリダイレクトさせたいということを指し示しています。

**show.html** テンプレートの、**#{display /}** タグの後ろに、HTMLフォームを書きましょう。

bc. <h3>Post a comment</h3>
 
@form(controllers.Application.postComment(post._1.id())) {
    <p>
        <label for="author">Your name: </label>
        <input type="text" name="author" />
    </p>
    <p>
        <label for="content">Your message: </label>
        <textarea name="content"></textarea>
    </p>
    <p>
        <input type="submit" value="Submit your comment" />
    </p>
}

さて、新しいコメントをPostしてみましょう。

!images/guide4-1!

h2. <a>バリデーションを追加</a>

現在、コメント登録前にコンテンツのバリデーションをしていません。両方の入力を必須にしたいと思います。 Play バリデーション機能を使えば、 HTTP パラメータが埋められていることを簡単に確実にすることができます。 **postComment** アクションを編集して、バリデーションを行い、エラーが起きていないことを確認てください。

bc. def postComment(postId:Long) = {
    val author = params.get("author")
    val content = params.get("content")
    Validation.required("author", author)
    Validation.required("content", content)
    if(Validation.hasErrors) {
        show(postId)
    } else {
        Comment.create(Comment(postId, author, content))
        Action(show(postId))
    }
}

p(note). **play.data.validation._**　を Import するのを **忘れないで** ください。

見て分かるように、バリデーションエラーになった場合、 Post 詳細ページを再表示しています。エラーメッセージを表示するように修正しましょう。

bc. <h3>Post a comment</h3>
 
@form(controllers.Application.postComment(post._1.id())) {
    
    @if(errors) {
        <p class="error">
            All fields are required!
        </p>
    }
    
    <p>
        <label for="author">Your name: </label>
        <input type="text" name="author" value="@params.get("author")">
    </p>
    <p>
        <label for="content">Your message: </label>
        <textarea name="content">@params.get("content")</textarea>
    </p>
    <p>
        <input type="submit" value="Submit your comment" />
    </p>
}

@errors@ と @params@ を参照しています。それをテンプレートパラメータリストに加えて、 *暗黙値* としてマークする必要があります。

bc. @(
    post:(models.Post,models.User,Seq[models.Comment]),
    pagination:(Option[models.Post],Option[models.Post])
)(
    implicit 
    params:play.mvc.Scope.Params,
    flash:play.mvc.Scope.Flash,
    errors:Map[String,play.data.validation.Error]
)
 
…

投稿者に対してもっと分かりやすいフィードバックUIを作るために、エラー時に自動的に入力欄にフォーカスが当たる小さな JavaScript を追加します。このスクリプトはサポートライブラリとして JQuery Tools Expose を使っているので、これをインクルードしておきます。このライブラリをダウンロードして、 **yabe/public/javascripts/** ディレクトリに格納して、 **main.html** テンプレートを以下のインクルード文を含めるように修正してください。

bc. …
<script src="@asset("public/javascripts/jquery-1.5.2.min.js")"></script>
<script src="@asset("public/javascripts/jquery.tools.min.js")"></script>
…

これで以下のスクリプトを、 **show.scala.html** テンプレートに追加できるようになりました。（ページの最後に追加するように御願いします。）

bc. <script type="text/javascript" charset="utf-8">
    $(function() {         
        // Expose the form 
        $('form').click(function() { 
            $('form').expose({api: true}).load(); 
        }); 
        
        // If there is an error, focus to form
        if($('form .error').size()) {
            $('form').expose({api: true, loadSpeed: 0}).load(); 
            $('form input[type=text]').get(0).focus();
        }
    });
</script>

!images/guide4-2!

コメントフォームはとってもかっこ良くなりました。もう２つやりましょう。

ひとつは、Postが成功した時に、成功メッセージを出す処理を追加します。このためにflash scopeを使います。

**postComment** を編集し、成功メッセージを追加してください。

bc. def postComment(postId:Long) = {
    val author = params.get("author")
    val content = params.get("content")
    Validation.required("author", author)
    Validation.required("content", content)
    if(Validation.hasErrors) {
        show(postId)
    } else {
        Comment.create(Comment(postId, author, content))
        flash += "success" -> ("Thanks for posting " + author)
        Action(show(postId))
    }
}

**show.html** に表示を追加します。

bc. …
@if(flash.get("success")) {
    <p class="success">@flash.get("success")</p>
}
…

!images/guide4-3!

最後にURLをシンプルにしましょう。ルートファイルに以下定義を追加してください。

bc. POST    /posts/{postId}/comments                Application.postComment

以上。

p(note). Next: %(next)"キャプチャのセットアップ":guide5%. 

