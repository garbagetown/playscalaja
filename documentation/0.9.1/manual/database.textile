h1. データアクセスのオプション

アプリケーションのほとんどは、データベースへのアクセスが必要となります。このページでは、Play-Scala アプリケーションから SQL データベースを管理しなければいけないオプションについて記述します。


h2. Anorm を使う

Scala モジュールは *Anorm* という、まったく新しいデータアクセス層を取り込んでいます。Anorm は、純粋な SQL をデータベースへのアクセスのために使い、取得したデータセットを解析・変換するいくつかの API を提供します。

Anorm は、Scala からデータベースにアクセスするための最良の方法であり、このコンポーネントが Play-Scala の他の部分と包括的に統合されることができると確信しています。

より詳しくは、 "コンプリートマニュアル":anorm を確認してください。

h2. 他のデータベースアクセスライブラリとの統合

恐らく、読者は既に別の Scala 用データアクセスライブラリを使っていて、Play アプリケーションでもそれを使い続けたいと考えているでしょう。基本的に、Play アプリケーションは JDBC コネクションを管理し、既存の他のどのフレームワークとも統合できる、シンプルな @java.sql.Connection@ オブジェクトを提供します。

例えば、 "ScalaQuery":http://scalaquery.org/ を Play アプリケーションに統合するために必要なステップを紹介します。


h3. 1. dependencies.yml ファイルに ScalaQuery を追加

"ScalaQuery":http://scalaquery.org/download.html は、"Scala Tools repository":http://scala-tools.org/repo-releases/org/scalaquery/ から利用することができます。 **conf/depenencies.yml** ファイルを開き、以下の記述を追加してください。

bc. # Application dependencies
 
require:
    - play
    - play -> scala 0.9
    - org.scalaquery -> scalaquery_2.8.1 0.9.1:
        transitive:     false
    
repositories:
    
    - Scala Tools:
        type:       iBiblio
        root:       http://scala-tools.org/repo-releases
        contains:   
            - org.scalaquery -> *

実行させましょう。

bc. $ play dependencies

要求された jar を解決し、インストールします。

h3. 2. アプリケーションにデータソースを設定する。

アプリケーションの **conf/application.conf** ファイル内で、インメモリデータベースを有効するためにこの行のコメントを外してください。

bc. # To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
db=mem

h3. 3. データベースを初期化するために SQL エボリューションスクリプト を作る

まだ無いようでしたら、 **db/evolutions** ディレクトリをアプリケーション内に作って、 **1.sql** という最初のエボリューションスクリプトを追加してください。

bc. # Users schema
 
# --- !Ups
 
CREATE TABLE MEMBERS (
    ID bigint(20) NOT NULL,
    NAME varchar(255) NOT NULL,
    EMAIL varchar(255),
    PRIMARY KEY (ID)
);
 
INSERT INTO members VALUES (1, 'Guillaume', 'gbo@zenexity.com');
INSERT INTO members VALUES (2, 'Sadek', NULL);
 
# --- !Downs
 
DROP TABLE MEMBERS;

この最初のスクリプトは、データベースが空で、且つインメモリデータベースが稼働している時に、自動的に適用されます。ログを確認してください。

bc. ...
13:31:50,674 INFO  ~ Connected to jdbc:h2:mem:play;MODE=MYSQL
13:31:50,752 INFO  ~ Application 'myScalaQueryApp' is now started !
13:31:51,064 INFO  ~ Automatically applying evolutions in in-memory database
...

h3. ソースコード内で ScalaQuery を使う。

さて、データベースに登録された全ての **Members** を問い合わせする、簡単なアクションメソッドを書いてみましょう。

bc. import play.mvc._
 
import org.scalaquery.session._
import org.scalaquery.session.Database.threadLocalSession
import org.scalaquery.ql.basic.BasicDriver.Implicit._
import org.scalaquery.ql.basic.{BasicTable => Table}
import org.scalaquery.ql.TypeMapper._
import org.scalaquery.ql._
 
package models {
 
    object Members extends Table[(Int, String, Option[String])]("MEMBERS") {
        def id = column[Int]("ID")
        def name = column[String]("NAME")
        def email = column[Option[String]]("EMAIL")
        def * = id ~ name ~ email
        
        def all = (for(m <- Members) yield m.name ~ m.email).list
    }
 
}
 
package controllers {
  
    object Application extends Controller { 
 
        val db = Database.forDataSource(play.db.DB.datasource)
        
        def index = {     
            
            db withSession {
                
                import models._
            
                Template('members -> Members.all)
            
            }
    
        }
 
    }
 
}

以下の行で、 **Play** が管理するデータベースに **ScalaQuery** が単純にリンクされたことが分かりますね。 

bc. val db = Database.forDataSource(play.db.DB.datasource)

以上です！どの他の Scala データベースアクセスライブラリにも、この短いチュートリアルに記載したやり方が適用できると思いますよ。

