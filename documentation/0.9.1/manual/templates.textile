h1. Scala テンプレート

Play フレームワークの Scala モジュールは、 Scala ベースの新しく、本当に強力なテンプレートエンジンを持っています。この新しいテンプレートエンジンの設計は、特に以下のような ASP.NET Razor のコンセプトに影響を受けています。

*コンパクトで、表現力豊で、柔軟* ——というコンセプトは、ファイルに入力する文字数を最小限にし、より素早く、より柔軟なコーディングワークフローを実現させるものです。多くのテンプレート文法と違って、HTML 文中にはっきりとサーバ処理ブロックのコーディングを割り込ませる必要はありません。パーサーはとても賢く、推論処理によってサーバサイド処理かどうかを判断します。これによって、とてもコンパクトで、表現力豊かなはっきりとした文法を提供し、コーディングを素早く、かつ楽しいものにしています。

*学習コストが低い* ——というコンセプトは、最小限のコンセプトで素早く実開発できる状態に持って行くということを意味しています。使うのは、Scala と、HTML のスキルが全てです。

*新しい言語ではない* —— 我々は新しい言語を作ることにならないように意識しました。その代わりに、我々は開発者に、Scala 言語のスキルが使えるようにしたり、開発者が選択する言語を使ったHTML開発ワークフローを使えるテンプレートのマークアップ文法を提供したりしたかったのです。

*どんなテキストエディタでも開発できる。* —— Razor は特定のツールを要求したりはせず、どんな古い単純なテキストエディタでも開発できるようになっています。

h2. 概要

Play フレームワークの Scala テンプレートは、小さな Scala コードのブロックを含む、シンプルなテキストファイルです。どんなテキストベースのフォーマット（HTML や、XML 、CSV など）でも生成することができます。

とりわけ、HTMLの開発を快適に行えるように設計されており、Web デザイナーとの恊働が可能となっています、

テンプレートは、標準的な Scala 関数としてコンパイルされ、シンプルなネーミング規約に従います。

bq. もし *views/Application/index.scala.html* というテンプレートファイルを作ったなら、 @views.Application.html.index@ という関数が生成されます。

ここに標準的なテンプレートを例示します。

bc. @(customer:models.Customer, orders:Seq[models.Order])
 
<h1>Welcome @customer.name!</h1>
 
@if(orders) {
     
    <h2>Here is a list of your current orders:</h2>
     
    <ul>
    @orders.map { order =>
        <li>@order.title</li>
    }
    </ul>
     
} else {
     
    <h2>You don't have any order yet...</h2>
     
}

そしてこれは、関数としてどの Scala コードからも簡単に使うことができます。

bc. val page:play.template.Html = views.Application.html.index(
    customer, orders
)

h2. 文法: 魔法の文字 '@' 

Scala テンプレートは、 *'@'* を、特別な文字として使います。この文字の出現は、Scala 文が始まることを意味します。コードブロックの終了を明示的に示す必要はなく、コードから推察してくれます。

bc. Hello @customer.name!
           ^^^^^^^^^^^
           Scala code

テンプレートエンジンは、コード分析から自動的に処理の終了を判断するので、シンプルな文しか書くことができません。もし複数の処理を実装したいなら、括弧を使って囲んでください。

bc. Hello @(customer.firstName + customer.lastName)!
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    Scala Code

通常の Scala コードのように、中括弧を使うことで複数文を記述することができます。

bc. Hello @{val name = customer.firstName + customer.lastName; name}!
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                             Scala Code

p(note). *'@'* は唯一の特殊文字で、もし＠を使いたいなら、 *'@@'* と、エスケープ処理を行ってください。

h2. テンプレート引数

テンプレートは関数なので、引数が必要です。テンプレート引数は、テンプレートの最初の行で宣言されていなければいけません。

bc. @(customer:models.Customer, orders:Seq[models.Order])

また、引数の *デフォルト値* も使うことができます。

bc. @(title:String = "Home")

あるいは、いくつかの引数グループも使うことができます。

bc. @(title:String)(body: => Html)

さらに、暗黙引数も使えます。

bc. @(title:String)(body: => Html)(implicit session:play.mvc.Scope.Session)

p(note). 全ての引数の型は、省略せずに記述しなければなりません。

h2. 繰り返し

Scalaの @for comprehension@ (for 内包表記) というとても標準的な方法を使うことができます。テンプレートのコンパイラーは @yield@ をブロックの前に追加しているだけです。

bc. <ul>
@for(p <- products) {
    <li>@p.name ($@p.price)</li>
} 
</ul>

しかし、おそらくご存知のように、 @for comprehension@ は古典的な map 処理のシュガーシンタックスです。

bc. <ul>
@products.map { p =>
    <li>@p.name ($@p.price)</li>
} 
</ul>

h2. If構文

ここでは特別なことはありません。普通に Scala の @if@ を使ってください。

bc. @if(items.isEmpty) {
    <h1>Nothing to display</h1>
} else {
    <h1>@items.size items!</h1>
}

h2. パターンマッチング

パターンマッチングもテンプレートの中で使えます。

bc. @connected match {
    
    case Admin(name) => {
        <span class="admin">Connected as admin (@name)</span>
    }
    
    case User(name) => {
        <span>Connected as @name</span>
    }
    
}


h2. 再利用可能な処理の宣言

再利用可能なコードブロック（もしくはサブテンプレート）を作ることができます。

bc. @display(product:models.Product) = {
    @product.name ($@product.price)
}
 
<ul>
@products.map { p =>
    @display(product = p)
} 
</ul>

再利用可能なピュア Scala ブロックを宣言することもできます。

bc. @title(text:String) = @{
    text.split(' ').map(_.capitalize).mkString(" ")
}
 
<h1>@title("hello world")</h1>

h2. Import 文

テンプレート（もしくはサブテンプレート）の始まりに、インポート処理を実装することができます。

bc. @(customer:models.Customer, orders:Seq[models.Order])
 
@import utils._
 
...

h2. テンプレートの構成 (タグ, レイアウト, インクルード, 等)

テンプレートはシンプルな関数になるので、どんな形にも構成することができます。以下にいくつか、一般的なシナリオを例示します。

h3. レイアウト

*views/main.scala.html* テンプレートをメインレイアウトとして振る舞うように宣言してみます。

bc. @(title:String)(content: => Html)
 
<h1>@title</h1>
 
<hr>
 
<div id="main">
    @content
</div>
 
<hr>
 
<div id="footer">
    ...
</div>

ご覧のように、このテンプレートは２つのパラメータを取得します。タイトルと、HTML です。

ですので、別の *views/Application/index.scala.html* テンプレートからこれを使うことができます。

bc. @main(title = "Home") {
    
    <h1>Home page</h1>
    
}

h3. タグ

HTML通知を表示する、シンプルな *views/tags/notice.scala.html* タグを書きましょう。

bc. @(level:String = "error")(body: (String) => Html)
 
@level match {
    
    case "success" => {
        <p class="success">
            @body("green")
        </p>
    }
    
    case "warning" => {
        <p class="warning">
            @body("orange")
        </p>
    }
    
    case "error" => {
        <p class="error">
            @body("red")
        </p>
    }
    
}

そして、テンプレートからこれを使います。

bc. @import views.tags.html._
 
@notice("error") { color =>
    Oops, something is <span style="color:@color">wrong</span>
}

h3. インクルード

特別なことはありません、普通に他のテンプレートを呼び出してください。

bc. <h1>Home</h1>
 
<div id="side">
    @views.common.html.sideBar()
</div>



