h1. Play フレームワークで Scala を勉強

Scala を学ぶには人生は短すぎます。Play-Scala モジュールは Scala を学習するに最も簡単な方法です。Play がコンパイルから、実行、Scala コード上のエラー表現等、インタラクティブな開発スタイルを提供してくれているおかげで、Scala の勉強をすぐに始めることができます。

h2. <a>Play with Scala</a>

**Play with Scala** は、このモジュールのアプリケーションの一部で、Scala コードをインタラクティブにコーディングしたり、あなたの好きなエディタからでも実行させることができます。

実行するには、 **$PLAY_HOME/modules/scala/samples-and-test/play-with-scala** に移動し、以下のように実行してください。

bc. $ play run

お好きなブラウザで、 "http://localhost:9000":http://localhost:9000 にアクセスしてください。

!images/play-with-scala!

アプリケーションに含まれている **app/scrapbook.scala** ファイルを、エディタで開いてください。

bc. package play_with_scala {
 
    class Scrapbook {
        print("Howdy, open the app/scrapbook.scala file, and start to Play!") 
    }
 
}

@Scrapbook@ クラスの中身は、WEBページがリロードされる度に自動的に実行されます。 @print@ 文や @println@ 文の結果は、WEB ページ内に印字されます。

例えば、ダミーのデフォルト @print@ 文を削除し、以下のもっと面白いコードに置き換えてみてください。

bc. package play_with_scala {
 
    class Scrapbook {
        val numbers = 0 to 10
        
        print(numbers)
        
        val sum = numbers.reduceLeft( (a,b) => a + b )
        
        print(sum)
        
        val strings = numbers.map( a => "Number:" + a )
        
        print(strings)
        
        val odds = numbers.filter( _ % 2 == 0 )
        
        print(odds)
    }
 
}

そして、ブラウザをリロードします。

!images/play-with-scala2!

@Scrapbook@ クラス内のコードに限定される必要はなく、どのクラスでもどの関数でも定義することができます。

bc. package play_with_scala {
 
    class Scrapbook {
        val users = List(
            User("guillame", "gbo@zenexity.com"),
            User("sadek", "sdr@zenexity.com")
        )
                    
        val allEmails = (users:List[User]) => {
            for( user <- users ) yield user.email
        }
                    
        print( allEmails(users) )
    }
    
    case class User(name: String, email: String)
 
}

以下のように表示されます。

!images/play-with-scala3!

もちろん、エラーになれば、エラーページが表示されます。

!images/play-with-scala-error!

h2. <a>Resources</a>

*Play with Scala* は以下のいくつかのリソースにリンクしているので、Scala の学習に役立ててください。

# "Scala for Java Refugees":http://www.codecommit.com/blog/scala/roundup-scala-for-java-refugees
# "Programming scala":http://programming-scala.labs.oreilly.com/
# "Ninety-Nine Scala Problems":http://aperiodic.net/phil/scala/s-99/
# "And of course the official scala website":http://www.scala-lang.org/