h1. プロジェクト立ち上げ

h2. <a>はじめに</a>

このチュートリアルでは、Scala 言語を使って、Play フレームワークベースのアプリケーションの開発を一通り学習することができます。このアプリでは、Play アプリケーション開発の実践を通して、実際のプロジェクトで必要とされるであろう、全てのことを試すことができます。

このチュートリアルはいくつかの独立した章に分割しています。それぞれの章で、実際のプロジェクトで必要とされる、バリデーションや、エラーハンドリング、セキュリテリ対策、自動テスト、WEB 画面、管理領域などの、より複雑な機能を紹介しています。

p(note). このチュートリアル内の **全てのソースコード** は、実際のプロジェクトで使ってもらって構いません。どんどんコードスニペットをコピペしたり、まるまる盗んだりしてください。

h2. <a>プロジェクト</a>

チュートリアルのプロジェクとして、「 yet another blog engine（ちょっと気の利いたブログエンジン）」を選択しました。あまり想像力に富んだ選択とは言えないけど、今どきの WEB アプリに求められているほとんどの機能を紹介することができます。

編集者や管理者といったいくつかの違う権限ユーザを管理することで、このブログエンジンをより面白くすることができます。

このブログエンジンプロジェクトを **yabe** と呼ぶことにします。

!images/guide1-0!

p(note). このチュートリアルは、サンプルアプリケーションとして提供されています。ソースコードは、Scala モジュールがインストールされているディレクトリの、 **samples-and-tests/yabe/** 配下にあります。

h2. <a>Play frameworkのインストール</a>

インストールはとても簡単です。ダウンロードページからバイナリパッケージをダウンロードして、それを解凍して適当なところに配置してください。Scala モジュールは、Play フレームワークのバージョン *1.2* 以上からのみに対応となりますので、気をつけてください。

p(note). Windows の場合は、 **c:\Documents And Settings\user\play** のように、パスの中にスペース文字を含めず、 **c:\play** とした方が賢明です。

効率的に作業するために、Play ディレクトリに Path を切っておく方がいいでしょう。これで、 **play** とコマンドプロンプトに入力するだけで、play ユーティリティを使うことができます。インストールがうまく行っていることを確認するために、 **play** と打ってみましょう。基礎的な使い方についてのヘルプ画面が表示されます。

h2. <a>Scala モジュールをインストール</a>

Scala で PlayFramework を使うのは簡単で、Scala モジュールをダウンロードするだけです。 @play install scala@ とコマンドを実行するだけで以下のようにインストール可能です。

bc. $ play install scala
~        _            _ 
~  _ __ | | __ _ _  _| |
~ | '_ \| |/ _' | || |_|
~ |  __/|_|\____|\__ (_)
~ |_|            |__/   
~
~ play! 1.2, http://www.playframework.org
~
~ Will install scala-0.9
~ This module is compatible with: Play 1.2
~ Do you want to install this version (y/n)? y
~ Installing module scala-0.9...
~
~ Fetching http://www.playframework.org/modules/scala-0.9.zip
~ [--------------------------100%-------------------------] 17313.2 KiB/s   
~ Unzipping...
~
~ Module scala-0.9 is installed!

h2. <a>プロジェクト作成</a>

さて、Play を正しくインストールできたので、ブログアプリケーションを作り始めましょう。Play アプリを作るのはとても簡単で、Play コマンドラインのユーティリティで全て管理することができます。これによって、全ての Play アプリケーションで、標準的なレイアウトが適用されることになるのです。

以下のようにコマンドを入力しましょう。

bc. ~$ play new yabe --with scala

アプリケーションのフルネームを入力するよう求められるので、 **Yet Another Blog Engine** と入力しましょう。

!images/guide1-1!

**play new** コマンドは、yabe/ ディレクトリを作成し、以下の重要なディレクトリやファイルを配置します。

* **app/** ディレクトリは、アプリケーションのコア要素を格納するディレクトリです。 **.scala** ソースファイルが配置されるのもここです。 

* **conf/** ディレクトリは、アプリケーションの全ての設定ファイルが格納されます。メインとなるのは、 **application.conf** ファイルであり、他にも **routes** 定義ファイルや、 **dependencies.yml** ファイル、他言語化に使われる **messages** ファイルなどが格納されます。

* **lib/** ディレクトリには、 **.jar** ファイルとしてパッケージされた、Scala ライブラリや Java ライブラリが格納される。

* **public/** ディレクトリには、パブリックに利用できるリソースを格納する。javascript ファイルや、スタイルシート、画像ファイルなどが含まれる。

* **test/** ディレクトリには、アプリケーションの全てのテストコードが含まれる。テストコードは ScalaTest 、もしくは Selenium テストとして記述される。

このように、 **conf/dependencies.yml** という依存性を定義するファイルには、Scala の依存性が自動的に定義されます

bc. # Application dependencies
 
require:
    - play
    - play -> scala 0.9

p(note). **Play フレームワークは UTF-8 によってのみエンコーディングされる** ため、全ての定義ファイルが UTF-8 でエンコーディングされていることが重要になります。適宜、エディタのエンコーディングを設定してください。

さて、熟練の Scala プログラマなら .class ファイルはどこに行くのかと考えるでしょう。答えは「どこにも行かない」です。Play フレームワークは .class ファイルを一切使わず、Scala ソースファイルを直接読み込みます。

これは開発過程において、２つの重要な意味を持ちます。ひとつは、 Scala ソースファイルの変更を検出し、実行中に自動的に再読み込みする、ということです。ふたつめは、 Exception が発生した時に、 Play フレームワークは実際の Scala ソースコードベースでエラーレポートを表示させることができる、ということです。

実際には、Playは **tmp/** ディレクトリにバイトコードキャッシュを保持しますが、大きなアプリケーションの再起動処理を高速化させるためだけのものです。必要とあらば、 **play clean** コマンドによってキャッシュをクリアすることができます。

h2. <a>アプリケーション稼働</a>

さて、新しく作ったアプリケーションを試してみましょう。 **helloworld/** ディレクトリ内で、 **play run** コマンドを実行するだけで OK です。Play はアプリケーションをロードして、9000 番ポートで WEB サーバを起動します。

ブラウザで URL を "http://localhost:9000":http://localhost:9000 と指定することで新しいアプリケーションを確認することができます。新しく作ったアプリケーションは、デフォルトの WELCOME ページを用意していて、これが表示されたことで作成がうまくいったことが分かります。

!images/guide1-2!

この新しいアプリケーションがどのようにこのページを表示しているのか見てみましょう。

主な入り口は、 **conf/routes** ファイルになります。このファイルでは、全てのアクセス可能なURLを定義します。生成された routes ファイルを参照すると、最初の「ルート」を確認することができます。

bc. GET		/			Application.index

これは、単純に、 **/** パスに対する **GET** リクエストを受け取ると、 @Application.index@ アクションメソッドを呼び出すということを意味します。このケースでは、 @Application.index@ は、 @controllers.Application.index@ へのショートカットとなります。controllers パッケージは暗黙的に解決されます。

スタンドアローンのScalaアプリを作る際には、以下のように @main@ メソッドによって入り口を定義されたシングルオブジェクトを一般的には使います。

bc. object Main {
    def main(args: Array[String]) {
        …
    }
}

Play アプリでは、それぞれのURLにくくり付く、いくつかの入り口を持ちます。これを **アクションメソッド** と呼びます。アクションメソッドは、 **コントローラ** という特別なオブジェクトで定義されます。

@controllers.Application@ コントローラがどのようなものか見てみましょう。 **yabe/app/controllers.scala** ソースファイルを開きます。

bc. package controllers
 
import play._
import play.mvc._
 
object Application extends Controller {
    
    import views.Application._
    
    def index = {
        html.index("Your new Scala application is ready!")
    }
    
}

@play.mvc.Controller@ クラスを継承していることに気づくと思います。

この index アクションは、このオブジェクトの単なるメソッドとして定義されます。これがアクションメソッドの定義方法です。アクションメソッドは、フレームワークによって、純粋な HTTP レスポンスに暗黙的に変換される値を常に返します。

デフォルトの index アクションはシンプルです。 *views.Application.html.index* を呼び出し、そこから生成される HTML を応答します。テンプレートを使うのは HTTP レスポンスを生成するのに最も一般的な方法になります。（唯一の方法ではありません）

テンプレートは、 **/app/views** に配置された、Scala ソースファイルになります。

テンプレートファイルを見てみましょう。 **yabe/app/views/Application/index.scala.html** を開きます。

bc. @(title:String)
 
@main(title) {
    
    @views.defaults.html.welcome(title)
    
}

テンプレートの中身は実に簡単に見えますね。実際、これは他のテンプレートを呼び出し、 Welcome ページを生成しているのです。

一行目はテンプレートの引数を定義しています。 *play.template.Html* を生成する関数をテンプレートとしているという定義になります。この場合、テンプレートは String 型の @title@ 引数を持っていて、テンプレートの型は、 @(String) => Html@ となります。

そして、このテンプレートは ２つの引数（ @String@ と @Html@ ブロック）を要求する、 @main@ という別のテンプレートを呼び出します。

mainテンプレートが定義されている、 **yabe/app/views/main.scala.html** を見てみましょう。

bc. @(title:String = "")(body: => Html)
 
<!DOCTYPE html>
<html>
  <head>
    <title>@title</title>
    <link rel="stylesheet" href="@asset("public/stylesheets/main.css")">
    <link rel="shortcut icon" href="@asset("public/images/favicon.png")">
    <script src="@asset("public/javascripts/jquery-1.5.2.min.js")"></script>
  </head>
  <body>
    @body
  </body>
</html>

ここでも一行目はテンプレートのパラメータを定義しています。 @main@ テンプレートの型は @(String) (Html) => Html@ になります。

コントローラファイルを編集することで、Play フレームワークがどのようにリロードするかを確認することができます。 **yabe/app/controllers.scala** を開いて、間違いを埋め込んでみましょう。

bc. def index = html.index()

ブラウザを開いて、リロードしてみてください。Playフレームワークが変更を反映して、アプリケーションコントローラをリロードしようとしていることが確認できます。しかし埋め込んだ間違いのために、コンパイルエラーになります。

!images/guide1-3!

では、プログラムを修正し、正しく編集しましょう。

bc. def index = {
    Logger.info("Index page has been requested")
    html.index("Your new Scala application is ready!")
}

この時、Play フレームワークはコントローラを正しくリロードし、JVM 内の古いコードを置き換えます。 **/** URL宛へのリクエストが発生するたびに、コンソール上に「Index page has been requested」というメッセージが表示されます。

この無駄な行を消して、 **yabe/app/views/Application/index.scala.html** テンプレートを編集し、Welcome メッセージを置き換えましょう。

bc. @main("Home") {
    
    <h1>A blog will be there</h1>
    
}

テンプレートの引数を削除したので、コントローラを修正します。

bc. def index = {
    html.index()
}

h2. <a>DBのセットアップ</a>

開発を始める前に、もうひとつやらなければならないことがあります。ブログエンジンにはデータベースが必要です。開発用に Play フレームワークは H2 というスタンドアローンの DB 管理システムを持っています。きちんとした DB に切り替える前に、プロジェクトをスタートするには、ベストな手法となります。アプリケーションの再起動をまたいでデータを保持したいか、そうでないかで、ファイルシステムデータベースか、インメモリデータベースかを選ぶことができます。

最初は、モデルを何回も変更したりテストしたりするため、アプリ起動の度にデータをリフレッシュするインメモリデータベースを使うのがいいでしょう。

データベースをセットアップするために、 **yabe/conf/application.conf** を開いて、以下の行のコメントをはずしてください。

bc. db=mem

コメントを見れば分かるように、JDBC接続に簡単に切り替えることができるし、コネクションプールさえ設定することができる。

さて、ブラウザに戻り welcome ページをリロードしてみましょう。 Play フレームワークはデータベースを自動的にスタートさせます。以下のログが出力されることを確認してください。

bc. INFO  ~ Connected to jdbc:h2:mem:play

<hr>

p(note). 次は %(next)"データモデルの最初のイテレーション":guide2%. 

