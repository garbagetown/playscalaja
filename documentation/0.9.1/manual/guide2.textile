h1. データモデルの最初のイテレーション.

ここではブログエンジンのデータモデルを作りましょう。

h2. <a>Anormの紹介</a>

モデル層はPlayアプリケーション（に限らず全てのきちんと設計されたアプリケーション）において中心的な位置づけとなります。アプリケーションが扱う、ドメイン固有の情報表現となります。ブログエンジンをつくるので、モデル層にはUserクラス、Postクラス、Commentクラスが含まれます。

ほとんどのモデルオブジェクトは、アプリケーションの起動をまたがって保持し続けたいので、我々はそれを永続データベースに保存する必要があります。一般的にはリレーショナルデータベースが選択されます。

Scalaモジュールは、"Anorm":anorm という全く新しいデータアクセス層を持ちます。AnormはデータベースリクエストのためにプレーンなSQLを使い、データセットを解析・変換するためのいくつかのAPIを提供します。

*Anorm* は、ニーズに応じていくつかの使い方があります。ここでは、SQLクエリ結果を、データを表現するための **Caseクラス** のセットに自動的にマッピングする、一歩進んだ使い方を紹介します。

h2. <a>Userモデル</a>

ブログエンジンの開発の手始めに、Userモデルを作りましょう。

最初に、データベースに *User* テーブルを作成する必要があります。Playフレームワークの、SQLスキーマの変更を再編成する *エボリューション機能* を使います。以下のSQLスクリプトを記述した、 *db/evolutions/1.sql*　ファイルを作成してください。

bc. # Users schema
 
# --- !Ups
 
CREATE TABLE User (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    email varchar(255) NOT NULL,
    password varchar(255) NOT NULL,
    fullname varchar(255) NOT NULL,
    isAdmin boolean NOT NULL,
    PRIMARY KEY (id)
);
 
# --- !Downs
 
DROP TABLE User; 


アプリケーションのトップページをリロードして、Playフレームワークにこのスクリプトを適用させます。

p(note). ここではインメモリデータベースを使います。データはまだ空なので、Playフレームワークはワーニングを出力せず自動的にスクリプトを適用します。以下のログ出力をコンソール上で確認してください
 
@INFO  ~ Automatically applying evolutions in in-memory database@

さて、 UserモデルのScalaクラスを用意しなければなりません。 **/yabe/app/models.scala** ファイルを作成し、 *User* クラスの最初の実装を記述してください。

bc. package models
 
import play.db.anorm._
import play.db.anorm.SqlParser._
 
// User
 
case class User(
    id: Pk[Long], 
    email: String, password: String, fullname: String, isAdmin: Boolean
)

このように、Userの *Caseクラス* はテーブル定義と一致します。これは、Userテーブルを扱うSQLクエリ結果を解析するのに便利です。

さて、Userクラスのコンパニオンオブジェクトも用意しましょう。

bc. object User extends Magic[User]

p(note). @Magic@型を使うには、 @play.db.anorm.defaults._@ をインポートしておく必要があります。

この *User* オブジェクトは、 *Magic* オブジェクトを継承しています。Magicオブジェクトは、パラメータを決める型を分析し、SQLクエリを解析・実行するための機能群を提供します。

アプリケーションのトップページをリロードすると結果を確認できます。実際には、間違っていない限り、変化を確認する必要はありません。Playフレームワークは自動的にUserクラスをコンパイルし、ロードしますが、この段階でアプリケーションに機能が追加されるわけでは無いからです。

h2. <a>最初のテストを書く</a>

新しく作ったUserクラスをテストするには、テストケースを書くのがいいです。それによって、都度都度アプリケーションが正しく、完璧に稼働することを確認することができます。

テストケースを稼働させるためには、テストモードでの起動が必要です。今稼働しているアプリケーションを停止させて、コマンドラインで以下のように入力してください。

bc. ~$ play test

**play test** コマンドは、 **play run** コマンドとほとんど同じです。違うのは、テストケースをブラウザから直接稼働させることができるテストランナーモジュールをロードすることです。

p(note). **テストモード** でアプリケーションを稼働させるとき、Playフレームワークはテスト用フレームワークIDへ切り替えを行い、それに応じた　**application.conf**　ファイルをロードします。詳しくは、"framework ID documentation":ids を参照してください。

ブラウザで、 "http://localhost:9000/@tests":http://localhost:9000/@tests にアクセスし、テストランナーを確認してください。デフォルトのテストを全て選択して実行してみてください。オールグリーンになるはずです。ただ、デフォルトのテストは実体は何もテストしていません。

!images/guide2-1!

Scalaモジュールは、 "ScalaTestフレームワーク":http://www.scalatest.org をバンドルしています。

アプリケーションのモデル部分のテストをするには、振舞起動テストを使います。以下のようにデフォルトの **Tests.scala** ファイルは既に存在しています。 **/yabe/test/Tests.scala** ファイルを開いてみましょう。

bc. import play._
import play.test._
 
import org.scalatest._
import org.scalatest.junit._
import org.scalatest.matchers._
 
class BasicTests extends UnitFlatSpec with ShouldMatchers {
    
    it should "run this dumb test" in {
        
        (1 + 1) should be (2)
        
    }
 
}

不要なテスト **it should "run this dumb test"** を削除し、ユーザを登録して取得し直すテストを作ってみましょう。

bc. import models._    
import play.db.anorm._
    
it should "create and retrieve a User" in {
    
    User.create(User(NotAssigned, "bob@gmail.com", "secret", "Bob", false))
   
    val bob = User.find(
        "email={email}").on("email" -> "bob@gmail.com"
    ).first()
   
    bob should not be (None)
    bob.get.fullname should be ("Bob")
   
}

見て分かるように、Userコンパニオンオブジェクトは、 @create(u:User)@ と @find(sql:String)@ というメソッドを提供しています。

Userテーブルの *id* カラムは、自動生成列として宣言されているので、 @NotAssigned@ がidの値として使われています。

p(note). Magicクラスのメソッドについては、Playフレームワークのマニュアルの、 "Anorm":anorm の章を参照してください。

テストランナーの中で、 **BasicTests** を選択し、Startをクリックして、オールグリーンとなることを確認してください。

特定のユーザ名とパスワードが存在することをチェックするメソッドが必要なのでそれを書いて、テストしましょう。

**models.scala** の中に、Userオブジェクトを応答する **connect()** メソッドを追加しましょう。

bc. object User extends Magic[User] {
    
    def connect(email: String, password: String) = {
        User.find("email = {email} and password = {password}")
            .on("email" -> email, "password" -> password)
            .first()
    }
    
}

テストケースはこんな感じ。

bc. it should "connect a User" in {
    
    User.create(User(NotAssigned, "bob@gmail.com", "secret", "Bob", false))
    
    User.connect("bob@gmail.com", "secret") should not be (None)
    User.connect("bob@gmail.com", "badpassword") should be (None)
    User.connect("tom@gmail.com", "secret") should be (None)
    
}

修正する度にテストランナーで全てのテストを走らせば、アプリケーションを一切壊さずに済ませることができます。

h2. <a>Postモデル</a>

Postモデルはブログ投稿を表示することができます。

Userモデルと同様に、Postテーブルをデータベース内に作らないといけません。これは二つ目のデータベースのevolutionになります。以下のスクリプトを記述した、 *db/evolutions/2.sql* ファイルを作成します。

bc. # --- !Ups
 
CREATE TABLE Post (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    title varchar(255) NOT NULL,
    content text NOT NULL,
    postedAt date NOT NULL,
    author_id bigint(20) NOT NULL,
    FOREIGN KEY (author_id) REFERENCES User(id),
    PRIMARY KEY (id)
);
 
# --- !Downs
 
DROP TABLE Post;

この時、データベースは空ではありません。Playフレームワークは、このevolutionを適用する前に、適用していいかどうか問い合わせます。

!images/guide2-12!

そして、このテーブルをScalaクラスにマッピングします。

bc. case class Post(
    id: Pk[Long], 
    title: String, content: String, postedAt: Date, author_id: Long
)
 
object Post extends Magic[Post]

p(note). この @Post@ クラスを使うには、 @java.util.Date@ をインポートしておいてください。
 
@import java.util.{Date}@

**Post** モデルが期待通り動くか確認するテストを作りましょう。しかしもっとテストを書く前に、テストの中でやらなければならないことがあります。今のテストでは、データベースの内容が削除されず、いちいち新しいテストが稼働するたびに、オブジェクトがどんどん作られて行ってしまいます。より複雑なテストがオブジェクトをカウントして正しい挙動を確認するようになると、この問題はすぐに顕在化してきます。

なので、テストの度にデータベースを削除しておく必要があります。 @BeforeAndAfterEachtrait@ をテストクラスにミックスインして、 @beforeEach@ メソッドをオーバーライドしてください。

bc. … extends UnitFlatSpec with ShouldMatchers with BeforeAndAfterEach {
    
    import models._    
    import play.db.anorm._
    
    override def beforeEach() {
        Fixtures.deleteDatabase()
    }
    
    …

このように、 **Fixtures** クラスはテスト中にデータベースを扱うヘルパーの役割を担います。テストをもう一度稼働させて、何も壊していないことを確認した後、次のテストを記述しましょう。

bc. it should "create a Post" in {
    
    User.create(User(Id(1), "bob@gmail.com", "secret", "Bob", false))     
    Post.create(Post(NotAssigned, "My first post", "Hello!", new Date, 1))
    
    Post.count().single() should be (1)
    
    val posts = Post.find("author_id={id}").on("id" -> 1).as(Post*)
    
    posts.length should be (1)
    
    val firstPost = posts.headOption
    
    firstPost should not be (None)
    firstPost.get.author_id should be (1)
    firstPost.get.title should be ("My first post")
    firstPost.get.content should be ("Hello!")
    
}

さて、我々の使い方を考えると、各Post記事が作成者のホームページにくくり付いているようにしたくなりますよね。では、Postオブジェクトに、ひとつのクエリでUserオブジェクトと *Post* オブジェクトをくくり付かせるメソッドを追加しましょう。

bc. select * from Post p 
join User u on p.author_id = u.id 
order by p.postedAt desc

これは *author_id* カラムで行う単純なJOINです。

p(note). もしSQL文をテストしたければ、 "http://localhost:9000/@db":http://localhost:9000/@db で、SQLコンソールににアクセスすることができます。

@Post@ オブジェクトに、SQLクエリを実行するメソッドを追加しましょう。

bc. def allWithAuthor:List[(Post,User)] = 
    SQL(
        """
            select * from Post p 
            join User u on p.author_id = u.id 
            order by p.postedAt desc
        """
    ).as( Post ~< User ^^ flatten * )

ここでは、JDBCの結果を @List[(Post,User)]@ として解析して変換する *パーサー* を使っています。ここのパーサーは非常にシンプルです。

* 行毎に @Post@ データを @User@ に括り付ける。
* @flatten@ は @Post~User@ をよりシンプルな @(Post,User)@ 構造にに変換。（テンプレートを使うよりもシンプルになります）
* @*@ を使うことで、行毎にこれを繰り返す

最後のパーサーは @Post ~< User ^^ flatten *@ と記述します。

最後に、突合テストを追加しましょう。

bc. it should "retrieve Posts with author" in {
    
    User.create(User(Id(1), "bob@gmail.com", "secret", "Bob", false)) 
    Post.create(Post(NotAssigned, "My 1st post", "Hello world", new Date, 1))
    
    val posts = Post.allWithAuthor
    
    posts.length should be (1)
    
    val (post,author) = posts.head
    
    post.title should be ("My 1st post")
    author.fullname should be ("Bob")
}

h2. <a>コメントを追加</a>

ドラフト版モデルに最後に追加しなければいけないのは、Postに対してコメントを付ける機能です。

いつものように、evolutionスクリプトを作成し、データベーススキーマを更新してください。スクリプトファイルは、 *db/evolutions/3.sql* になります。

bc. # --- !Ups
 
CREATE TABLE Comment (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    author varchar(255) NOT NULL,
    content text NOT NULL,
    postedAt date NOT NULL,
    post_id bigint(20) NOT NULL,
    FOREIGN KEY (post_id) REFERENCES Post(id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);
 
# --- !Downs
 
DROP TABLE Comment;

リロードして、evolutionを適用してください。そして、突合構造を作ります。

bc. case class Comment(
    id: Pk[Long], 
    author: String, content: String, postedAt: Date, post_id: Long
) 
 
object Comment extends Magic[Comment]

また、 *Post* オブジェクトに新しいメソッドを追加します。コメントリストと一緒にPostデータを取得するためのメソッドです。最初のメソッドは全件取得するメソッドです。

bc. def allWithAuthorAndComments:List[(Post,User,List[Comment])] = 
    SQL(
        """
            select * from Post p 
            join User u on p.author_id = u.id 
            left join Comment c on c.post_id = p.id 
            order by p.postedAt desc
        """
    ).as( Post ~< User ~< Post.spanM( Comment ) ^^ flatten * )

ここでは、パーサーは少し複雑です。 @Post.spanM( Comment )@ はいくつかの行を拡張し、Post毎にコメントリストを抜き取ります。

もうひとつのメソッドは、Postのidから @Option[(Post,User,List[Comment])]@ を応答するメソッドです。

bc. def byIdWithAuthorAndComments(id: Long):Option[(Post,User,List[Comment])] = 
    SQL(
        """
            select * from Post p 
            join User u on p.author_id = u.id 
            left join Comment c on c.post_id = p.id 
            where p.id = {id}
        """
    ).on("id" -> id).as( Post ~< User ~< Post.spanM( Comment ) ^^ flatten ? )

さて、これらのメソッドをテストする時間です。

bc. it should "support Comments" in {
    
    User.create(User(Id(1), "bob@gmail.com", "secret", "Bob", false))  
    Post.create(Post(Id(1), "My first post", "Hello world", new Date, 1))
    Comment.create(Comment(NotAssigned, "Jeff", "Nice post", new Date, 1))
    Comment.create(Comment(NotAssigned, "Tom", "I knew that !", new Date, 1))
    
    User.count().single() should be (1)
    Post.count().single() should be (1)
    Comment.count().single() should be (2)
    
    val Some( (post,author,comments) ) = Post.byIdWithAuthorAndComments(1)
    
    post.title should be ("My first post")
    author.fullname should be ("Bob")
    comments.length should be (2)
    comments(0).author should be ("Jeff")
    comments(1).author should be ("Tom")
    
}

うまくいきましたか？

最後に、コメント追加をシンプルにするヘルパーメソッドを **Comment** オブジェクトに追加します。

bc. object Comment extends Magic[Comment] {
    
    def apply(post_id: Long, author: String, content: String) = {
        new Comment(NotAssigned, author, content, new Date(), post_id)
    }
    
}

h2. <a>Fixturesを使ってもっと複雑なテストを</a>

もっと複雑なテストを書き出した時、データのセットがしばしば必要になります。Fixturesは "YAML":http://en.wikipedia.org/wiki/Yaml ファイルにモデルを記述し、テスト前にいつでもロードします。

**/yabe/test/data.yml** を編集し、Userを記述しましょう。

bc. 
- !!models.User
    id:             !!Id[Long] 1
    email:          bob@gmail.com
    password:       secret
    fullname:       Bob
    isAdmin:        true
 
...

このファイルはちょっと大きいので、 "ここから":files/data.yml ダウンロードしてください。

Yamlファイルのロードはとても簡単です。

bc. Yaml[List[Any]]("data.yml").foreach { 
    _ match {
        case u:User => User.create(u)
        case p:Post => Post.create(p)
        case c:Comment => Comment.create(c)
    }
}

@Yaml@ ヘルパーは、Yamlデータをクラスインスタンスの中に転送し、これらのインスタンスをデータベースに入れ込む @Magic@ オブジェクトの代わりに使えます。

さて、データをロードし、いくつかのチェックを行うテストを作りましょう。

bc. it should "load a complex graph from Yaml" in {
    
    Yaml[List[Any]]("data.yml").foreach { 
        _ match {
            case u:User => User.create(u)
            case p:Post => Post.create(p)
            case c:Comment => Comment.create(c)
        }
    }
    
    User.count().single() should be (2)
    Post.count().single() should be (3)
    Comment.count().single() should be (3)
    
    User.connect("bob@gmail.com", "secret") should not be (None)
    User.connect("jeff@gmail.com", "secret") should not be (None)
    User.connect("jeff@gmail.com", "badpassword") should be (None)
    User.connect("tom@gmail.com", "secret") should be (None)
    
    val allPostsWithAuthorAndComments = Post.allWithAuthorAndComments
    
    allPostsWithAuthorAndComments.length should be (3) 
    
    val (post,author,comments) = allPostsWithAuthorAndComments(2)
    post.title should be ("About the model layer")
    author.fullname should be ("Bob")
    comments.length should be (2)
    
    // We have a referential integrity error error
    User.delete("email={email}")
        .on("email"->"bob@gmail.com").executeUpdate().isLeft should be (true)
    
    Post.delete("author_id={id}")
        .on("id"->1).executeUpdate().isRight should be (true)
        
    User.delete("email={email}")
        .on("email"->"bob@gmail.com").executeUpdate().isRight should be (true)
    
    User.count().single() should be (1)
    Post.count().single() should be (1)
    Comment.count().single() should be (0)
    
}

<hr>

これでブログエンジンの大部分は完了です。これでWebアプリケーションそのものを作成し、テストすることができるようになりました。

p(note). 次は、 %(next)"初めての画面開発":guide3%. 
