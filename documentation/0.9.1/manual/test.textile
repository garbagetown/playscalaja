h1. アプリケーションのテスト

Play-Scala は、 "ScalaTest":http://www.scalatest.org/ を持っています、これは、根本的に異なるテストスタイルを提供するものです。

Scala ソースコードで書かれたテストは、 Play-Java と同じように **test** ディレクトリに格納し、 @play test@ コマンドを実行することで、テスト実行環境をとアプリケーションに統合させることができます。

詳しくは、 "ScalaTest reference":http://www.scalatest.org/user_guide を参照してください。

h2. JUnit 方式

この方式だと、どのテストメソッドにも、 ==<code>@Test</code>== アノテーションを付加する必要があります。

bc. class JUnitStyle extends UnitTestCase with AssertionsForJUnit {
    
    @Before def setUp = Fixtures.deleteAll()
    
    @Test def verifyEasy {
        assert("A" == "A")
        intercept[StringIndexOutOfBoundsException] {
            "concise".charAt(-1)
        }
    }
    
}

h2. Should 句を使った Junit 方式

@ShouldMatchers@ Trait は、should 句を使った、テスト内の成立条件を表現する DSL を提供します。

bc. class JUnitStyleWithShould extends UnitTestCase with ShouldMatchersForJUnit {
    
    @Before def setUp = Fixtures.deleteAll()
    
    @Test def verifyEasy {        
        val name = "Guillaume"        
        name should be ("Guillaume")       
        evaluating { 
            "name".charAt(-1) 
        } should produce [StringIndexOutOfBoundsException]       
        name should have length (9)       
        name should include ("i")       
        name.length should not be < (8)       
        name should not startWith ("Hello")
    }
    
}

h2. 関数一式方式

このように各テストに、関数を作ります。

bc. class FunctionsSuiteStyle extends UnitFunSuite with ShouldMatchers {
    
    Fixtures.deleteAll()
    
    test("Hello...") (pending)
    
    test("1 + 1") {        
        (1 + 1) should be (2)        
    }
    
    test("Something") {
        "Guillaume" should not include ("X")
    }
    
    test("1 + 1 again") {        
        (1 + 1) should be (2)   
    }
    
}

h2. 仕様書方式

この方式では、テストが検証する振る舞いを明記したテキストで組み合わせられた、ビヘイビア駆動開発を提供します。


bc. class SpecStyle extends UnitFlatSpec with ShouldMatchers {
 
    val name = "Hello World"
 
    "'Hello World'" should "not contain the X letter" in {
        name should not include ("X")
    }
 
    it should "have 11 chars" in {
        name should have length (11)      
    }
    
}

h2. 機能一覧方式

機能につき、ひとつのシナリオがそれぞれのテストに記載します。

bc. class FeatureStyle extends UnitFeatureSpec { 
 
    feature("The user can pop an element off the top of the stack") { 
        scenario("pop is invoked on a non-empty stack") (pending)
        scenario("pop is invoked on an empty stack") (pending)
    }
  
}
